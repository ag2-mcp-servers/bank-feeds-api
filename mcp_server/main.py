# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:14:24+00:00



import argparse
import json
import os
from typing import *
from typing import Optional
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Path, Query
from pydantic import conint

from models import (
    BankFeedAccount,
    BankFeedAccounts,
    BankTransactions,
    BankTransactionsResponse,
    CreateBankTransactionsResponse,
    PushOption,
)

app = MCPProxy(
    contact={'email': 'support@codat.io', 'name': 'Codat'},
    description='Bank Feeds API enables your SMB users to set up bank feeds from accounts in your application to supported accounting platforms.\n\nA bank feed is a connection between a source bank account—in your application—and a target bank account in a supported accounting package.\n\n[Read more...](https://docs.codat.io/bank-feeds-api/overview)\n\n[See our OpenAPI spec](https://github.com/codatio/oas) ',
    termsOfService='https://www.codat.io/legals/',
    title='Bank Feeds API',
    version='2.1.0',
    servers=[{'description': 'Production', 'url': 'https://api.codat.io'}],
)


@app.get(
    '/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts',
    description=""" Get BankFeed BankAccounts for a single data source connected to a single company. """,
    tags=['bank_feed_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_bank_feeds(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
):
    """
    List bank feed bank accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts',
    description=""" Put BankFeed BankAccounts for a single data source connected to a single company. """,
    tags=['bank_feed_management', 'bank_account_setup'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_bank_feed(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    body: BankFeedAccounts = None,
):
    """
    Create bank feed bank accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/companies/{companyId}/connections/{connectionId}/connectionInfo/bankFeedAccounts/{accountId}',
    description=""" Update a single BankFeed BankAccount for a single data source connected to a single company. """,
    tags=['bank_feed_management', 'bank_account_setup'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_bank_feed(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    account_id: UUID = Path(..., alias='accountId'),
    body: BankFeedAccount = None,
):
    """
    Update bank feed bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/data/bankAccounts/{accountId}/bankTransactions',
    description=""" Gets bank transactions for a given bank account ID """,
    tags=['bank_transaction_management', 'bank_feed_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_bank_account_transactions(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    account_id: UUID = Path(..., alias='accountId'),
    page: conint(ge=0) = 1,
    page_size: Optional[conint(ge=1, le=5000)] = Query(100, alias='pageSize'),
    query: Optional[str] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
):
    """
    List bank transactions for bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/companies/{companyId}/connections/{connectionId}/options/bankAccounts/{accountId}/bankTransactions',
    description=""" Gets the options of pushing bank account transactions. """,
    tags=['bank_feed_management', 'bank_transaction_management', 'bank_account_setup'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_create_bank_account_model(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    account_id: UUID = Path(..., alias='accountId'),
):
    """
    List push options for bank account bank transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/companies/{companyId}/connections/{connectionId}/push/bankAccounts/{accountId}/bankTransactions',
    description=""" Posts bank transactions to the accounting package for a given company.

> **Supported Integrations**
> 
> Check out our [Knowledge UI](https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions) for integrations that support POST methods. """,
    tags=['bank_transaction_management', 'bank_feed_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_bank_transactions(
    company_id: UUID = Path(..., alias='companyId'),
    connection_id: UUID = Path(..., alias='connectionId'),
    account_id: UUID = Path(..., alias='accountId'),
    allow_sync_on_push_complete: Optional[bool] = Query(
        True, alias='allowSyncOnPushComplete'
    ),
    timeout_in_minutes: Optional[int] = Query(None, alias='timeoutInMinutes'),
    body: BankTransactions = None,
):
    """
    Create bank transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
