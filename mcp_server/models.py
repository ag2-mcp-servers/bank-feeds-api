# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:14:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel, constr


class DataType(Enum):
    accountTransactions = 'accountTransactions'
    balanceSheet = 'balanceSheet'
    bankAccounts = 'bankAccounts'
    bankTransactions = 'bankTransactions'
    billCreditNotes = 'billCreditNotes'
    billPayments = 'billPayments'
    bills = 'bills'
    cashFlowStatement = 'cashFlowStatement'
    chartOfAccounts = 'chartOfAccounts'
    company = 'company'
    creditNotes = 'creditNotes'
    customers = 'customers'
    directCosts = 'directCosts'
    directIncomes = 'directIncomes'
    invoices = 'invoices'
    items = 'items'
    journalEntries = 'journalEntries'
    journals = 'journals'
    paymentMethods = 'paymentMethods'
    payments = 'payments'
    profitAndLoss = 'profitAndLoss'
    purchaseOrders = 'purchaseOrders'
    salesOrders = 'salesOrders'
    suppliers = 'suppliers'
    taxRates = 'taxRates'
    trackingCategories = 'trackingCategories'
    transfers = 'transfers'
    banking_accountBalances = 'banking-accountBalances'
    banking_accounts = 'banking-accounts'
    banking_transactionCategories = 'banking-transactionCategories'
    banking_transactions = 'banking-transactions'
    commerce_companyInfo = 'commerce-companyInfo'
    commerce_customers = 'commerce-customers'
    commerce_disputes = 'commerce-disputes'
    commerce_locations = 'commerce-locations'
    commerce_orders = 'commerce-orders'
    commerce_paymentMethods = 'commerce-paymentMethods'
    commerce_payments = 'commerce-payments'
    commerce_productCategories = 'commerce-productCategories'
    commerce_products = 'commerce-products'
    commerce_taxComponents = 'commerce-taxComponents'
    commerce_transactions = 'commerce-transactions'


class DateTime(RootModel[str]):
    root: str = Field(
        ...,
        description='In Codat\'s data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:\n\n```\n2020-10-08T22:40:50Z\n2021-01-01T00:00:00\n```\n\n\n\nWhen syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:\n\n- Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`\n- Unqualified local time: `2021-11-15T01:00:00`\n- UTC time offsets: `2021-11-15T01:00:00-05:00`\n\n> Time zones\n> \n> Not all dates from Codat will contain information about time zones.  \n> Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.',
        examples=['2022-10-23T00:00:00Z'],
        title='Date time',
    )


class HRef(BaseModel):
    href: Optional[str] = None


class Links(BaseModel):
    current: HRef
    next: Optional[HRef] = None
    previous: Optional[HRef] = None
    self: HRef


class Schema(RootModel[UUID]):
    root: UUID = Field(
        ...,
        description='Unique identifier for your SMB in Codat.',
        examples=['8a210b68-6988-11ed-a1eb-0242ac120002'],
    )


class SchemaModel(RootModel[UUID]):
    root: UUID = Field(
        ...,
        description="Unique identifier for a company's data connection.",
        examples=['2e9d2c44-f675-40ba-8049-353bfcb5e171'],
    )


class PushOperationStatus(Enum):
    Pending = 'Pending'
    Failed = 'Failed'
    Success = 'Success'
    TimedOut = 'TimedOut'


class PushOptionType(Enum):
    Array = 'Array'
    Object = 'Object'
    String = 'String'
    Number = 'Number'
    Boolean = 'Boolean'
    DateTime = 'DateTime'
    File = 'File'
    MultiPart = 'MultiPart'


class BankTransactionType(Enum):
    Unknown = 'Unknown'
    Credit = 'Credit'
    Debit = 'Debit'
    Int = 'Int'
    Div = 'Div'
    Fee = 'Fee'
    SerChg = 'SerChg'
    Dep = 'Dep'
    Atm = 'Atm'
    Pos = 'Pos'
    Xfer = 'Xfer'
    Check = 'Check'
    Payment = 'Payment'
    Cash = 'Cash'
    DirectDep = 'DirectDep'
    DirectDebit = 'DirectDebit'
    RepeatPmt = 'RepeatPmt'
    Other = 'Other'


class PushChangeType(Enum):
    Unknown = 'Unknown'
    Created = 'Created'
    Modified = 'Modified'
    Deleted = 'Deleted'
    AttachmentUploaded = 'AttachmentUploaded'


class PushOperationRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataType: Optional[DataType] = None
    id: Optional[str] = None


class ValidationItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    itemId: Optional[str] = None
    message: Optional[str] = None
    validatorName: Optional[str] = None


class PushFieldValidation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    details: constr(min_length=1)
    field: Optional[str] = None
    ref: Optional[AnyUrl] = None


class BankFeedAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountName: Optional[str] = Field(None, description='The bank account name')
    accountNumber: Optional[str] = Field(None, description='The account number')
    accountType: Optional[str] = Field(
        None, description='The type of bank account e.g. Credit'
    )
    balance: Optional[float] = Field(
        None, description='The latest balance for the bank account'
    )
    currency: Optional[str] = Field(None, description='The currency e.g. USD')
    feedStartDate: Optional[DateTime] = None
    id: str = Field(..., description='Unique ID for the bank feed account')
    modifiedDate: Optional[DateTime] = Field(
        None, description='The last date the bank account was modified'
    )
    sortCode: Optional[str] = Field(None, description='The sort code')
    status: Optional[str] = None


class BankFeedAccounts(RootModel[List[BankFeedAccount]]):
    root: List[BankFeedAccount]


class BankTransactionLine(BaseModel):
    amount: float
    balance: float
    clearedOnDate: Optional[DateTime] = None
    counterparty: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    reconciled: bool
    reference: Optional[str] = None
    transactionType: BankTransactionType
    modifiedDate: Optional[DateTime] = Field(
        None, description='The date on which this record was last modified in Codat.'
    )
    sourceModifiedDate: Optional[DateTime] = Field(
        None,
        description='The date on which this record was last modified in the originating system',
    )


class PushOperationChange(BaseModel):
    attachmentId: Optional[str] = None
    recordRef: Optional[PushOperationRef] = None
    type: Optional[PushChangeType] = None


class Validation(BaseModel):
    errors: Optional[List[ValidationItem]] = None
    warnings: Optional[List[ValidationItem]] = None


class PushOptionChoice(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    required: Optional[bool] = None
    type: Optional[PushOptionType] = None
    value: Optional[constr(min_length=1)] = Field(
        None, description='Allowed value for field.'
    )


class PushValidationInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    information: Optional[List[PushFieldValidation]] = None
    warnings: Optional[List[PushFieldValidation]] = None


class BankTransactions(BaseModel):
    accountId: Optional[str] = None
    transactions: Optional[List[BankTransactionLine]] = None


class BankTransactionsResponse(BaseModel):
    results: Optional[List[BankTransactions]] = None
    field_links: Links = Field(..., alias='_links')
    pageNumber: int
    pageSize: int
    totalResults: int


class PushOperation(BaseModel):
    changes: Optional[List[PushOperationChange]] = None
    companyId: Schema
    completedOnUtc: Optional[DateTime] = Field(
        None, description='The datetime when the push was completed, null if Pending.'
    )
    dataConnectionKey: SchemaModel
    dataType: Optional[DataType] = Field(
        None, description='The type of data being pushed, eg invoices, customers.'
    )
    errorMessage: Optional[str] = None
    pushOperationKey: UUID = Field(
        ...,
        description='A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.',
    )
    requestedOnUtc: DateTime = Field(
        ..., description='The datetime when the push was requested.'
    )
    status: PushOperationStatus
    statusCode: int
    timeoutInMinutes: Optional[int] = None
    timeoutInSeconds: Optional[int] = None
    validation: Optional[Validation] = None


class PushOptionProperty(BaseModel):
    description: constr(min_length=1)
    displayName: constr(min_length=1)
    options: Optional[List[PushOptionChoice]] = None
    properties: Optional[Dict[str, PushOptionProperty]] = None
    required: bool
    type: PushOptionType
    validation: Optional[PushValidationInfo] = None


class CreateBankTransactionsResponse(PushOperation):
    data: Optional[BankTransactions] = None


class PushOption(BaseModel):
    description: Optional[str] = None
    displayName: constr(min_length=1)
    options: Optional[List[PushOptionChoice]] = None
    properties: Optional[Dict[str, PushOptionProperty]] = None
    required: bool
    type: PushOptionType
    validation: Optional[PushValidationInfo] = None


PushOptionProperty.model_rebuild()
